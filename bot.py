import re
import os
from flask import Flask, request
from telegram import Update, Bot
from telegram.ext import Application, MessageHandler, ContextTypes, filters

TOKEN = os.getenv("7557401455:AAEgd82mh4srSqmcAwmzXVqb8ZYXQHLvqRM")
HOSTNAME = os.getenv("QuadraticEquations1_bot")

WEBHOOK_PATH = f"/{TOKEN}"
WEBHOOK_URL = f"https://{HOSTNAME}{WEBHOOK_PATH}"

bot = Bot(token=TOKEN)
app = Flask(__name__)

telegram_app = Application.builder().token(TOKEN).build()

# üìò –ú–µ—Ç–æ–¥ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç–∞
def solve_by_discriminant(a, b, c):
    D = b**2 - 4*a*c
    steps = f"D = {b}¬≤ - 4√ó{a}√ó{c} = {D}\n"
    if D < 0:
        steps += "–ù–µ—Ç –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—Ä–Ω–µ–π."
    elif D == 0:
        x = -b / (2*a)
        steps += f"–û–¥–∏–Ω –∫–æ—Ä–µ–Ω—å: x = -{b}/(2√ó{a}) = {x}"
    else:
        x1 = (-b + D**0.5) / (2*a)
        x2 = (-b - D**0.5) / (2*a)
        steps += f"–î–≤–∞ –∫–æ—Ä–Ω—è: x‚ÇÅ = {x1}, x‚ÇÇ = {x2}"
    return steps

# üìó –ú–µ—Ç–æ–¥ –í–∏–µ—Ç–∞
def solve_by_vieta(a, b, c):
    if a == 0:
        return "–£—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ."
    s = -b / a
    p = c / a
    D = b**2 - 4*a*c
    if D < 0:
        return "–ö–æ—Ä–Ω–µ–π –Ω–µ—Ç (Vi√®te)."
    elif D == 0:
        x = -b / (2*a)
        return f"–û–¥–∏–Ω –∫–æ—Ä–µ–Ω—å (Vi√®te): x = {x}, —Å—É–º–º–∞ x‚ÇÅ+x‚ÇÇ = {s}, –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ x‚ÇÅ√óx‚ÇÇ = {p}"
    else:
        x1 = (-b + D**0.5) / (2*a)
        x2 = (-b - D**0.5) / (2*a)
        return f"–ö–æ—Ä–Ω–∏ –ø–æ –í–∏–µ—Ç–µ: x‚ÇÅ = {x1}, x‚ÇÇ = {x2}\n–ü—Ä–æ–≤–µ—Ä–∫–∞: x‚ÇÅ+x‚ÇÇ = {x1+x2}, x‚ÇÅ√óx‚ÇÇ = {x1*x2}"

# üìô –ú–µ—Ç–æ–¥ –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
def solve_by_square_completion(a, b, c):
    if a == 0:
        return "–ù–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ."
    h = b / (2*a)
    completed = f"(x + {h})¬≤ = {h**2 - c/a}" if a > 0 else f"(x - {abs(h)})¬≤ = {h**2 - c/a}"
    return f"–ü—Ä–∏–≤–æ–¥–∏–º —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫ –≤–∏–¥—É: {a}(x + {
