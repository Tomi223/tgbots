from flask import Flask, request
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters
import os
import re
import math

TOKEN = os.environ.get("7557401455:AAEgd82mh4srSqmcAwmzXVqb8ZYXQHLvqRM")
BOT_USERNAME = "QuadraticEquations1_bot"

app = Flask(__name__)
telegram_app = ApplicationBuilder().token(TOKEN).build()


def parse_equation(equation):
    try:
        equation = equation.replace(" ", "").replace("^2", "**2")
        match = re.fullmatch(r"([-+]?\d*)x\*\*2([-+]\d*)x([-+]\d+)=0", equation)
        if not match:
            return None
        a = int(match.group(1)) if match.group(1) not in ("", "+", "-") else int(match.group(1) + "1")
        b = int(match.group(2))
        c = int(match.group(3))
        return a, b, c
    except Exception:
        return None


def solve_by_discriminant(a, b, c):
    D = b ** 2 - 4 * a * c
    steps = [f"–ù–∞—Ö–æ–¥–∏–º –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç: D = b¬≤ - 4ac = {b}¬≤ - 4√ó{a}√ó{c} = {D}"]
    if D > 0:
        x1 = (-b + math.sqrt(D)) / (2 * a)
        x2 = (-b - math.sqrt(D)) / (2 * a)
        steps.append(f"D > 0, —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–º–µ–µ—Ç –¥–≤–∞ –∫–æ—Ä–Ω—è:")
        steps.append(f"x‚ÇÅ = (-b + ‚àöD) / 2a = ({-b} + ‚àö{D}) / (2√ó{a}) = {x1}")
        steps.append(f"x‚ÇÇ = (-b - ‚àöD) / 2a = ({-b} - ‚àö{D}) / (2√ó{a}) = {x2}")
    elif D == 0:
        x = -b / (2 * a)
        steps.append(f"D = 0, —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–º–µ–µ—Ç –æ–¥–∏–Ω –∫–æ—Ä–µ–Ω—å:")
        steps.append(f"x = -b / 2a = {-b} / (2√ó{a}) = {x}")
    else:
        steps.append("D < 0, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ—Ä–Ω–µ–π –Ω–µ—Ç.")
    return "\n".join(steps)


def solve_by_vieta(a, b, c):
    D = b ** 2 - 4 * a * c
    if D < 0:
        return "–ü–æ —Ç–µ–æ—Ä–µ–º–µ –í–∏–µ—Ç–∞: –∫–æ—Ä–Ω–µ–π –Ω–µ—Ç, —Ç–∞–∫ –∫–∞–∫ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π."
    x1 = (-b + math.sqrt(D)) / (2 * a)
    x2 = (-b - math.sqrt(D)) / (2 * a)
    s = x1 + x2
    p = x1 * x2
    return f"""–ü–æ —Ç–µ–æ—Ä–µ–º–µ –í–∏–µ—Ç–∞:
–°—É–º–º–∞ –∫–æ—Ä–Ω–µ–π: x‚ÇÅ + x‚ÇÇ = -b/a = {-b}/{a} = {s}
–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–π: x‚ÇÅ¬∑x‚ÇÇ = c/a = {c}/{a} = {p}
–ö–æ—Ä–Ω–∏: x‚ÇÅ = {x1}, x‚ÇÇ = {x2}"""


def solve_by_square_completion(a, b, c):
    h = b / (2 * a)
    completed = h ** 2 - c / a
    steps = [
        f"–ü—Ä–∏–≤–æ–¥–∏–º –∫ –≤–∏–¥—É a(x + b/2a)¬≤ = ...",
        f"x¬≤ + ({b}/{a})x + {c}/{a} = 0 ‚Üí (x + {h})¬≤ = {completed}",
    ]
    if completed < 0:
        steps.append("–ü–æ–¥–∫–æ—Ä–µ–Ω–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ ‚Äî –∫–æ—Ä–Ω–µ–π –Ω–µ—Ç.")
    else:
        sqrt_val = math.sqrt(completed)
        x1 = -h + sqrt_val
        x2 = -h - sqrt_val
        steps.append(f"x‚ÇÅ = {-h} + ‚àö{completed} = {x1}")
        steps.append(f"x‚ÇÇ = {-h} - ‚àö{completed} = {x2}")
    return "\n".join(steps)


@telegram_app.message_handler(filters.TEXT & ~filters.COMMAND)
async def handle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    parsed = parse_equation(text)
    if not parsed:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞: 2x^2 - 4x + 2 = 0")
        return

    a, b, c = parsed

    result = f"""–†–µ—à–∞–µ–º —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: {a}x¬≤ + {b}x + {c} = 0

üìò –ú–µ—Ç–æ–¥ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç–∞:
{solve_by_discriminant(a, b, c)}

üìó –ú–µ—Ç–æ–¥ –í–∏–µ—Ç–∞:
{solve_by_vieta(a, b, c)}

üìô –ú–µ—Ç–æ–¥ –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞:
{solve_by_square_completion(a, b, c)}
"""
    await update.message.reply_text(result)


@app.route(f"/{BOT_USERNAME}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), telegram_app.bot)
    telegram_app.update_queue.put_nowait(update)
    return "ok"


@app.before_first_request
def setup():
    telegram_app.bot.set_webhook(
        url=f"https://{os.environ.get('RENDER_EXTERNAL_HOSTNAME')}/{BOT_USERNAME}"
    )

if __name__ == "__main__":
    app.run(port=10000)